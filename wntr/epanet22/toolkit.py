# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_toolkit')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_toolkit')
    _toolkit = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_toolkit', [dirname(__file__)])
        except ImportError:
            import _toolkit
            return _toolkit
        try:
            _mod = imp.load_module('_toolkit', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _toolkit = swig_import_helper()
    del swig_import_helper
else:
    import _toolkit
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

EN_MAXID = _toolkit.EN_MAXID
EN_MAXMSG = _toolkit.EN_MAXMSG
EN_ELEVATION = _toolkit.EN_ELEVATION
EN_BASEDEMAND = _toolkit.EN_BASEDEMAND
EN_PATTERN = _toolkit.EN_PATTERN
EN_EMITTER = _toolkit.EN_EMITTER
EN_INITQUAL = _toolkit.EN_INITQUAL
EN_SOURCEQUAL = _toolkit.EN_SOURCEQUAL
EN_SOURCEPAT = _toolkit.EN_SOURCEPAT
EN_SOURCETYPE = _toolkit.EN_SOURCETYPE
EN_TANKLEVEL = _toolkit.EN_TANKLEVEL
EN_DEMAND = _toolkit.EN_DEMAND
EN_HEAD = _toolkit.EN_HEAD
EN_PRESSURE = _toolkit.EN_PRESSURE
EN_QUALITY = _toolkit.EN_QUALITY
EN_SOURCEMASS = _toolkit.EN_SOURCEMASS
EN_INITVOLUME = _toolkit.EN_INITVOLUME
EN_MIXMODEL = _toolkit.EN_MIXMODEL
EN_MIXZONEVOL = _toolkit.EN_MIXZONEVOL
EN_TANKDIAM = _toolkit.EN_TANKDIAM
EN_MINVOLUME = _toolkit.EN_MINVOLUME
EN_VOLCURVE = _toolkit.EN_VOLCURVE
EN_MINLEVEL = _toolkit.EN_MINLEVEL
EN_MAXLEVEL = _toolkit.EN_MAXLEVEL
EN_MIXFRACTION = _toolkit.EN_MIXFRACTION
EN_TANK_KBULK = _toolkit.EN_TANK_KBULK
EN_TANKVOLUME = _toolkit.EN_TANKVOLUME
EN_MAXVOLUME = _toolkit.EN_MAXVOLUME
EN_DIAMETER = _toolkit.EN_DIAMETER
EN_LENGTH = _toolkit.EN_LENGTH
EN_ROUGHNESS = _toolkit.EN_ROUGHNESS
EN_MINORLOSS = _toolkit.EN_MINORLOSS
EN_INITSTATUS = _toolkit.EN_INITSTATUS
EN_INITSETTING = _toolkit.EN_INITSETTING
EN_KBULK = _toolkit.EN_KBULK
EN_KWALL = _toolkit.EN_KWALL
EN_FLOW = _toolkit.EN_FLOW
EN_VELOCITY = _toolkit.EN_VELOCITY
EN_HEADLOSS = _toolkit.EN_HEADLOSS
EN_STATUS = _toolkit.EN_STATUS
EN_SETTING = _toolkit.EN_SETTING
EN_ENERGY = _toolkit.EN_ENERGY
EN_LINKQUAL = _toolkit.EN_LINKQUAL
EN_LINKPATTERN = _toolkit.EN_LINKPATTERN
EN_PUMP_STATE = _toolkit.EN_PUMP_STATE
EN_PUMP_EFFIC = _toolkit.EN_PUMP_EFFIC
EN_PUMP_POWER = _toolkit.EN_PUMP_POWER
EN_PUMP_HCURVE = _toolkit.EN_PUMP_HCURVE
EN_PUMP_ECURVE = _toolkit.EN_PUMP_ECURVE
EN_PUMP_ECOST = _toolkit.EN_PUMP_ECOST
EN_PUMP_EPAT = _toolkit.EN_PUMP_EPAT
EN_DURATION = _toolkit.EN_DURATION
EN_HYDSTEP = _toolkit.EN_HYDSTEP
EN_QUALSTEP = _toolkit.EN_QUALSTEP
EN_PATTERNSTEP = _toolkit.EN_PATTERNSTEP
EN_PATTERNSTART = _toolkit.EN_PATTERNSTART
EN_REPORTSTEP = _toolkit.EN_REPORTSTEP
EN_REPORTSTART = _toolkit.EN_REPORTSTART
EN_RULESTEP = _toolkit.EN_RULESTEP
EN_STATISTIC = _toolkit.EN_STATISTIC
EN_PERIODS = _toolkit.EN_PERIODS
EN_STARTTIME = _toolkit.EN_STARTTIME
EN_HTIME = _toolkit.EN_HTIME
EN_QTIME = _toolkit.EN_QTIME
EN_HALTFLAG = _toolkit.EN_HALTFLAG
EN_NEXTEVENT = _toolkit.EN_NEXTEVENT
EN_NEXTEVENTTANK = _toolkit.EN_NEXTEVENTTANK
EN_ITERATIONS = _toolkit.EN_ITERATIONS
EN_RELATIVEERROR = _toolkit.EN_RELATIVEERROR
EN_MAXHEADERROR = _toolkit.EN_MAXHEADERROR
EN_MAXFLOWCHANGE = _toolkit.EN_MAXFLOWCHANGE
EN_MASSBALANCE = _toolkit.EN_MASSBALANCE
EN_NODECOUNT = _toolkit.EN_NODECOUNT
EN_TANKCOUNT = _toolkit.EN_TANKCOUNT
EN_LINKCOUNT = _toolkit.EN_LINKCOUNT
EN_PATCOUNT = _toolkit.EN_PATCOUNT
EN_CURVECOUNT = _toolkit.EN_CURVECOUNT
EN_CONTROLCOUNT = _toolkit.EN_CONTROLCOUNT
EN_RULECOUNT = _toolkit.EN_RULECOUNT
EN_JUNCTION = _toolkit.EN_JUNCTION
EN_RESERVOIR = _toolkit.EN_RESERVOIR
EN_TANK = _toolkit.EN_TANK
EN_CVPIPE = _toolkit.EN_CVPIPE
EN_PIPE = _toolkit.EN_PIPE
EN_PUMP = _toolkit.EN_PUMP
EN_PRV = _toolkit.EN_PRV
EN_PSV = _toolkit.EN_PSV
EN_PBV = _toolkit.EN_PBV
EN_FCV = _toolkit.EN_FCV
EN_TCV = _toolkit.EN_TCV
EN_GPV = _toolkit.EN_GPV
EN_CLOSED = _toolkit.EN_CLOSED
EN_OPEN = _toolkit.EN_OPEN
EN_PUMP_XHEAD = _toolkit.EN_PUMP_XHEAD
EN_PUMP_CLOSED = _toolkit.EN_PUMP_CLOSED
EN_PUMP_OPEN = _toolkit.EN_PUMP_OPEN
EN_PUMP_XFLOW = _toolkit.EN_PUMP_XFLOW
EN_NONE = _toolkit.EN_NONE
EN_CHEM = _toolkit.EN_CHEM
EN_AGE = _toolkit.EN_AGE
EN_TRACE = _toolkit.EN_TRACE
EN_CONCEN = _toolkit.EN_CONCEN
EN_MASS = _toolkit.EN_MASS
EN_SETPOINT = _toolkit.EN_SETPOINT
EN_FLOWPACED = _toolkit.EN_FLOWPACED
EN_HW = _toolkit.EN_HW
EN_DW = _toolkit.EN_DW
EN_CM = _toolkit.EN_CM
EN_CFS = _toolkit.EN_CFS
EN_GPM = _toolkit.EN_GPM
EN_MGD = _toolkit.EN_MGD
EN_IMGD = _toolkit.EN_IMGD
EN_AFD = _toolkit.EN_AFD
EN_LPS = _toolkit.EN_LPS
EN_LPM = _toolkit.EN_LPM
EN_MLD = _toolkit.EN_MLD
EN_CMH = _toolkit.EN_CMH
EN_CMD = _toolkit.EN_CMD
EN_DDA = _toolkit.EN_DDA
EN_PDA = _toolkit.EN_PDA
EN_TRIALS = _toolkit.EN_TRIALS
EN_ACCURACY = _toolkit.EN_ACCURACY
EN_TOLERANCE = _toolkit.EN_TOLERANCE
EN_EMITEXPON = _toolkit.EN_EMITEXPON
EN_DEMANDMULT = _toolkit.EN_DEMANDMULT
EN_HEADERROR = _toolkit.EN_HEADERROR
EN_FLOWCHANGE = _toolkit.EN_FLOWCHANGE
EN_DEFDEMANDPAT = _toolkit.EN_DEFDEMANDPAT
EN_HEADLOSSFORM = _toolkit.EN_HEADLOSSFORM
EN_GLOBALEFFIC = _toolkit.EN_GLOBALEFFIC
EN_GLOBALPRICE = _toolkit.EN_GLOBALPRICE
EN_GLOBALPATTERN = _toolkit.EN_GLOBALPATTERN
EN_DEMANDCHARGE = _toolkit.EN_DEMANDCHARGE
EN_LOWLEVEL = _toolkit.EN_LOWLEVEL
EN_HILEVEL = _toolkit.EN_HILEVEL
EN_TIMER = _toolkit.EN_TIMER
EN_TIMEOFDAY = _toolkit.EN_TIMEOFDAY
EN_SERIES = _toolkit.EN_SERIES
EN_AVERAGE = _toolkit.EN_AVERAGE
EN_MINIMUM = _toolkit.EN_MINIMUM
EN_MAXIMUM = _toolkit.EN_MAXIMUM
EN_RANGE = _toolkit.EN_RANGE
EN_MIX1 = _toolkit.EN_MIX1
EN_MIX2 = _toolkit.EN_MIX2
EN_FIFO = _toolkit.EN_FIFO
EN_LIFO = _toolkit.EN_LIFO
EN_NOSAVE = _toolkit.EN_NOSAVE
EN_SAVE = _toolkit.EN_SAVE
EN_INITFLOW = _toolkit.EN_INITFLOW
EN_SAVE_AND_INIT = _toolkit.EN_SAVE_AND_INIT
EN_CONST_HP = _toolkit.EN_CONST_HP
EN_POWER_FUNC = _toolkit.EN_POWER_FUNC
EN_CUSTOM = _toolkit.EN_CUSTOM
EN_NOCURVE = _toolkit.EN_NOCURVE
EN_VOLUME_CURVE = _toolkit.EN_VOLUME_CURVE
EN_PUMP_CURVE = _toolkit.EN_PUMP_CURVE
EN_EFFIC_CURVE = _toolkit.EN_EFFIC_CURVE
EN_HLOSS_CURVE = _toolkit.EN_HLOSS_CURVE
EN_GENERIC_CURVE = _toolkit.EN_GENERIC_CURVE
EN_UNCONDITIONAL = _toolkit.EN_UNCONDITIONAL
EN_CONDITIONAL = _toolkit.EN_CONDITIONAL
EN_NO_REPORT = _toolkit.EN_NO_REPORT
EN_NORMAL_REPORT = _toolkit.EN_NORMAL_REPORT
EN_FULL_REPORT = _toolkit.EN_FULL_REPORT
EN_R_NODE = _toolkit.EN_R_NODE
EN_R_LINK = _toolkit.EN_R_LINK
EN_R_SYSTEM = _toolkit.EN_R_SYSTEM
EN_R_DEMAND = _toolkit.EN_R_DEMAND
EN_R_HEAD = _toolkit.EN_R_HEAD
EN_R_GRADE = _toolkit.EN_R_GRADE
EN_R_LEVEL = _toolkit.EN_R_LEVEL
EN_R_PRESSURE = _toolkit.EN_R_PRESSURE
EN_R_FLOW = _toolkit.EN_R_FLOW
EN_R_STATUS = _toolkit.EN_R_STATUS
EN_R_SETTING = _toolkit.EN_R_SETTING
EN_R_POWER = _toolkit.EN_R_POWER
EN_R_TIME = _toolkit.EN_R_TIME
EN_R_CLOCKTIME = _toolkit.EN_R_CLOCKTIME
EN_R_FILLTIME = _toolkit.EN_R_FILLTIME
EN_R_DRAINTIME = _toolkit.EN_R_DRAINTIME
EN_R_EQ = _toolkit.EN_R_EQ
EN_R_NE = _toolkit.EN_R_NE
EN_R_LE = _toolkit.EN_R_LE
EN_R_GE = _toolkit.EN_R_GE
EN_R_LT = _toolkit.EN_R_LT
EN_R_GT = _toolkit.EN_R_GT
EN_R_IS = _toolkit.EN_R_IS
EN_R_NOT = _toolkit.EN_R_NOT
EN_R_BELOW = _toolkit.EN_R_BELOW
EN_R_ABOVE = _toolkit.EN_R_ABOVE
EN_R_IS_OPEN = _toolkit.EN_R_IS_OPEN
EN_R_IS_CLOSED = _toolkit.EN_R_IS_CLOSED
EN_R_IS_ACTIVE = _toolkit.EN_R_IS_ACTIVE

def proj_run(ph: 'Handle', input_path: 'char const *', report_path: 'char const *', output_path: 'char const *') -> "int":
    """
    proj_run(ph, input_path, report_path, output_path) -> int

    Parameters
    ----------
    ph: Handle
    input_path: char const *
    report_path: char const *
    output_path: char const *

    """
    return _toolkit.proj_run(ph, input_path, report_path, output_path)

def proj_init(ph: 'Handle', rptFile: 'char const *', outFile: 'char const *', unitsType: 'EN_FlowUnits', headLossType: 'EN_HeadLossType') -> "int":
    """
    proj_init(ph, rptFile, outFile, unitsType, headLossType) -> int

    Parameters
    ----------
    ph: Handle
    rptFile: char const *
    outFile: char const *
    unitsType: enum EN_FlowUnits
    headLossType: enum EN_HeadLossType

    """
    return _toolkit.proj_init(ph, rptFile, outFile, unitsType, headLossType)

def proj_open(ph: 'Handle', inpFile: 'char const *', rptFile: 'char const *', binOutFile: 'char const *') -> "int":
    """
    proj_open(ph, inpFile, rptFile, binOutFile) -> int

    Parameters
    ----------
    ph: Handle
    inpFile: char const *
    rptFile: char const *
    binOutFile: char const *

    """
    return _toolkit.proj_open(ph, inpFile, rptFile, binOutFile)

def proj_getcount(ph: 'Handle', code: 'EN_CountType') -> "int *":
    """
    proj_getcount(ph, code) -> int

    Parameters
    ----------
    ph: Handle
    code: enum EN_CountType

    """
    return _toolkit.proj_getcount(ph, code)

def proj_savefile(ph: 'Handle', filename: 'char const *') -> "int":
    """
    proj_savefile(ph, filename) -> int

    Parameters
    ----------
    ph: Handle
    filename: char const *

    """
    return _toolkit.proj_savefile(ph, filename)

def proj_close(ph: 'Handle') -> "int":
    """
    proj_close(ph) -> int

    Parameters
    ----------
    ph: Handle

    """
    return _toolkit.proj_close(ph)

def hydr_solve(ph: 'Handle') -> "int":
    """
    hydr_solve(ph) -> int

    Parameters
    ----------
    ph: Handle

    """
    return _toolkit.hydr_solve(ph)

def hydr_save(ph: 'Handle') -> "int":
    """
    hydr_save(ph) -> int

    Parameters
    ----------
    ph: Handle

    """
    return _toolkit.hydr_save(ph)

def hydr_open(ph: 'Handle') -> "int":
    """
    hydr_open(ph) -> int

    Parameters
    ----------
    ph: Handle

    """
    return _toolkit.hydr_open(ph)

def hydr_init(ph: 'Handle', saveFlag: 'EN_InitHydOption') -> "int":
    """
    hydr_init(ph, saveFlag) -> int

    Parameters
    ----------
    ph: Handle
    saveFlag: enum EN_InitHydOption

    """
    return _toolkit.hydr_init(ph, saveFlag)

def hydr_run(ph: 'Handle') -> "long *":
    """
    hydr_run(ph) -> int

    Parameters
    ----------
    ph: Handle

    """
    return _toolkit.hydr_run(ph)

def hydr_next(ph: 'Handle') -> "long *":
    """
    hydr_next(ph) -> int

    Parameters
    ----------
    ph: Handle

    """
    return _toolkit.hydr_next(ph)

def hydr_close(ph: 'Handle') -> "int":
    """
    hydr_close(ph) -> int

    Parameters
    ----------
    ph: Handle

    """
    return _toolkit.hydr_close(ph)

def hydr_savefile(ph: 'Handle', filename: 'char *') -> "int":
    """
    hydr_savefile(ph, filename) -> int

    Parameters
    ----------
    ph: Handle
    filename: char *

    """
    return _toolkit.hydr_savefile(ph, filename)

def hydr_usefile(ph: 'Handle', filename: 'char *') -> "int":
    """
    hydr_usefile(ph, filename) -> int

    Parameters
    ----------
    ph: Handle
    filename: char *

    """
    return _toolkit.hydr_usefile(ph, filename)

def qual_solve(ph: 'Handle') -> "int":
    """
    qual_solve(ph) -> int

    Parameters
    ----------
    ph: Handle

    """
    return _toolkit.qual_solve(ph)

def qual_open(ph: 'Handle') -> "int":
    """
    qual_open(ph) -> int

    Parameters
    ----------
    ph: Handle

    """
    return _toolkit.qual_open(ph)

def qual_init(ph: 'Handle', saveFlag: 'EN_InitHydOption') -> "int":
    """
    qual_init(ph, saveFlag) -> int

    Parameters
    ----------
    ph: Handle
    saveFlag: enum EN_InitHydOption

    """
    return _toolkit.qual_init(ph, saveFlag)

def qual_run(ph: 'Handle') -> "long *":
    """
    qual_run(ph) -> int

    Parameters
    ----------
    ph: Handle

    """
    return _toolkit.qual_run(ph)

def qual_next(ph: 'Handle') -> "long *":
    """
    qual_next(ph) -> int

    Parameters
    ----------
    ph: Handle

    """
    return _toolkit.qual_next(ph)

def qual_step(ph: 'Handle') -> "long *":
    """
    qual_step(ph) -> int

    Parameters
    ----------
    ph: Handle

    """
    return _toolkit.qual_step(ph)

def qual_close(ph: 'Handle') -> "int":
    """
    qual_close(ph) -> int

    Parameters
    ----------
    ph: Handle

    """
    return _toolkit.qual_close(ph)

def rprt_writeline(ph: 'Handle', line: 'char *') -> "int":
    """
    rprt_writeline(ph, line) -> int

    Parameters
    ----------
    ph: Handle
    line: char *

    """
    return _toolkit.rprt_writeline(ph, line)

def rprt_writeresults(ph: 'Handle') -> "int":
    """
    rprt_writeresults(ph) -> int

    Parameters
    ----------
    ph: Handle

    """
    return _toolkit.rprt_writeresults(ph)

def rprt_reset(ph: 'Handle') -> "int":
    """
    rprt_reset(ph) -> int

    Parameters
    ----------
    ph: Handle

    """
    return _toolkit.rprt_reset(ph)

def rprt_set(ph: 'Handle', reportCommand: 'char *') -> "int":
    """
    rprt_set(ph, reportCommand) -> int

    Parameters
    ----------
    ph: Handle
    reportCommand: char *

    """
    return _toolkit.rprt_set(ph, reportCommand)

def rprt_setlevel(ph: 'Handle', code: 'EN_StatusReport') -> "int":
    """
    rprt_setlevel(ph, code) -> int

    Parameters
    ----------
    ph: Handle
    code: enum EN_StatusReport

    """
    return _toolkit.rprt_setlevel(ph, code)

def rprt_anlysstats(ph: 'Handle', code: 'EN_AnalysisStatistic') -> "double *":
    """
    rprt_anlysstats(ph, code) -> int

    Parameters
    ----------
    ph: Handle
    code: enum EN_AnalysisStatistic

    """
    return _toolkit.rprt_anlysstats(ph, code)

def anlys_getoption(ph: 'Handle', code: 'EN_Option') -> "double *":
    """
    anlys_getoption(ph, code) -> int

    Parameters
    ----------
    ph: Handle
    code: enum EN_Option

    """
    return _toolkit.anlys_getoption(ph, code)

def anlys_setoption(ph: 'Handle', code: 'EN_Option', value: 'double') -> "int":
    """
    anlys_setoption(ph, code, value) -> int

    Parameters
    ----------
    ph: Handle
    code: enum EN_Option
    value: double

    """
    return _toolkit.anlys_setoption(ph, code, value)

def anlys_getflowunits(ph: 'Handle') -> "int *":
    """
    anlys_getflowunits(ph) -> int

    Parameters
    ----------
    ph: Handle

    """
    return _toolkit.anlys_getflowunits(ph)

def anlys_setflowunits(ph: 'Handle', code: 'EN_FlowUnits') -> "int":
    """
    anlys_setflowunits(ph, code) -> int

    Parameters
    ----------
    ph: Handle
    code: enum EN_FlowUnits

    """
    return _toolkit.anlys_setflowunits(ph, code)

def anlys_gettimeparam(ph: 'Handle', code: 'EN_TimeParameter') -> "long *":
    """
    anlys_gettimeparam(ph, code) -> int

    Parameters
    ----------
    ph: Handle
    code: enum EN_TimeParameter

    """
    return _toolkit.anlys_gettimeparam(ph, code)

def anlys_settimeparam(ph: 'Handle', code: 'EN_TimeParameter', value: 'long') -> "int":
    """
    anlys_settimeparam(ph, code, value) -> int

    Parameters
    ----------
    ph: Handle
    code: enum EN_TimeParameter
    value: long

    """
    return _toolkit.anlys_settimeparam(ph, code, value)

def anlys_getqualinfo(ph: 'Handle') -> "int *, char *, char *, int *":
    """
    anlys_getqualinfo(ph) -> int

    Parameters
    ----------
    ph: Handle

    """
    return _toolkit.anlys_getqualinfo(ph)

def anlys_getqualtype(ph: 'Handle') -> "int *, int *":
    """
    anlys_getqualtype(ph) -> int

    Parameters
    ----------
    ph: Handle

    """
    return _toolkit.anlys_getqualtype(ph)

def anlys_setqualtype(ph: 'Handle', qualcode: 'EN_QualityType', chemname: 'char *', chemunits: 'char *', tracenode: 'char *') -> "int":
    """
    anlys_setqualtype(ph, qualcode, chemname, chemunits, tracenode) -> int

    Parameters
    ----------
    ph: Handle
    qualcode: enum EN_QualityType
    chemname: char *
    chemunits: char *
    tracenode: char *

    """
    return _toolkit.anlys_setqualtype(ph, qualcode, chemname, chemunits, tracenode)

def node_add(ph: 'Handle', id: 'char *', nodeType: 'EN_NodeType') -> "int":
    """
    node_add(ph, id, nodeType) -> int

    Parameters
    ----------
    ph: Handle
    id: char *
    nodeType: enum EN_NodeType

    """
    return _toolkit.node_add(ph, id, nodeType)

def node_delete(ph: 'Handle', index: 'int', actionCode: 'int') -> "int":
    """
    node_delete(ph, index, actionCode) -> int

    Parameters
    ----------
    ph: Handle
    index: int
    actionCode: int

    """
    return _toolkit.node_delete(ph, index, actionCode)

def node_getindex(ph: 'Handle', id: 'char *') -> "int *":
    """
    node_getindex(ph, id) -> int

    Parameters
    ----------
    ph: Handle
    id: char *

    """
    return _toolkit.node_getindex(ph, id)

def node_getid(ph: 'Handle', index: 'int') -> "char *":
    """
    node_getid(ph, index) -> int

    Parameters
    ----------
    ph: Handle
    index: int

    """
    return _toolkit.node_getid(ph, index)

def node_setid(ph: 'Handle', index: 'int', newid: 'char *') -> "int":
    """
    node_setid(ph, index, newid) -> int

    Parameters
    ----------
    ph: Handle
    index: int
    newid: char *

    """
    return _toolkit.node_setid(ph, index, newid)

def node_gettype(ph: 'Handle', index: 'int') -> "int *":
    """
    node_gettype(ph, index) -> int

    Parameters
    ----------
    ph: Handle
    index: int

    """
    return _toolkit.node_gettype(ph, index)

def node_getvalue(ph: 'Handle', index: 'int', code: 'EN_NodeProperty') -> "double *":
    """
    node_getvalue(ph, index, code) -> int

    Parameters
    ----------
    ph: Handle
    index: int
    code: enum EN_NodeProperty

    """
    return _toolkit.node_getvalue(ph, index, code)

def node_setvalue(ph: 'Handle', index: 'int', code: 'EN_NodeProperty', value: 'double') -> "int":
    """
    node_setvalue(ph, index, code, value) -> int

    Parameters
    ----------
    ph: Handle
    index: int
    code: enum EN_NodeProperty
    value: double

    """
    return _toolkit.node_setvalue(ph, index, code, value)

def node_getcoord(ph: 'Handle', index: 'int') -> "double *, double *":
    """
    node_getcoord(ph, index) -> int

    Parameters
    ----------
    ph: Handle
    index: int

    """
    return _toolkit.node_getcoord(ph, index)

def node_setcoord(ph: 'Handle', index: 'int', x: 'double', y: 'double') -> "int":
    """
    node_setcoord(ph, index, x, y) -> int

    Parameters
    ----------
    ph: Handle
    index: int
    x: double
    y: double

    """
    return _toolkit.node_setcoord(ph, index, x, y)

def dmnd_getmodel(ph: 'Handle') -> "int *, double *, double *, double *":
    """
    dmnd_getmodel(ph) -> int

    Parameters
    ----------
    ph: Handle

    """
    return _toolkit.dmnd_getmodel(ph)

def dmnd_setmodel(ph: 'Handle', type: 'int', pmin: 'double', preq: 'double', pexp: 'double') -> "int":
    """
    dmnd_setmodel(ph, type, pmin, preq, pexp) -> int

    Parameters
    ----------
    ph: Handle
    type: int
    pmin: double
    preq: double
    pexp: double

    """
    return _toolkit.dmnd_setmodel(ph, type, pmin, preq, pexp)

def dmnd_getcount(ph: 'Handle', nodeIndex: 'int') -> "int *":
    """
    dmnd_getcount(ph, nodeIndex) -> int

    Parameters
    ----------
    ph: Handle
    nodeIndex: int

    """
    return _toolkit.dmnd_getcount(ph, nodeIndex)

def dmnd_getbase(ph: 'Handle', nodeIndex: 'int', demandIndex: 'int') -> "double *":
    """
    dmnd_getbase(ph, nodeIndex, demandIndex) -> int

    Parameters
    ----------
    ph: Handle
    nodeIndex: int
    demandIndex: int

    """
    return _toolkit.dmnd_getbase(ph, nodeIndex, demandIndex)

def dmnd_setbase(ph: 'Handle', nodeIndex: 'int', demandIndex: 'int', baseDemand: 'double') -> "int":
    """
    dmnd_setbase(ph, nodeIndex, demandIndex, baseDemand) -> int

    Parameters
    ----------
    ph: Handle
    nodeIndex: int
    demandIndex: int
    baseDemand: double

    """
    return _toolkit.dmnd_setbase(ph, nodeIndex, demandIndex, baseDemand)

def dmnd_getpattern(ph: 'Handle', nodeIndex: 'int', demandIndex: 'int') -> "int *":
    """
    dmnd_getpattern(ph, nodeIndex, demandIndex) -> int

    Parameters
    ----------
    ph: Handle
    nodeIndex: int
    demandIndex: int

    """
    return _toolkit.dmnd_getpattern(ph, nodeIndex, demandIndex)

def dmnd_setpattern(ph: 'Handle', nodeIndex: 'int', demandIndex: 'int', patIndex: 'int') -> "int":
    """
    dmnd_setpattern(ph, nodeIndex, demandIndex, patIndex) -> int

    Parameters
    ----------
    ph: Handle
    nodeIndex: int
    demandIndex: int
    patIndex: int

    """
    return _toolkit.dmnd_setpattern(ph, nodeIndex, demandIndex, patIndex)

def dmnd_getname(ph: 'Handle', nodeIndex: 'int', demandIdx: 'int') -> "char *":
    """
    dmnd_getname(ph, nodeIndex, demandIdx) -> int

    Parameters
    ----------
    ph: Handle
    nodeIndex: int
    demandIdx: int

    """
    return _toolkit.dmnd_getname(ph, nodeIndex, demandIdx)

def dmnd_setname(ph: 'Handle', nodeIndex: 'int', demandIdx: 'int', demandName: 'char *') -> "int":
    """
    dmnd_setname(ph, nodeIndex, demandIdx, demandName) -> int

    Parameters
    ----------
    ph: Handle
    nodeIndex: int
    demandIdx: int
    demandName: char *

    """
    return _toolkit.dmnd_setname(ph, nodeIndex, demandIdx, demandName)

def link_add(ph: 'Handle', id: 'char *', linkType: 'EN_LinkType', fromNode: 'char *', toNode: 'char *') -> "int":
    """
    link_add(ph, id, linkType, fromNode, toNode) -> int

    Parameters
    ----------
    ph: Handle
    id: char *
    linkType: enum EN_LinkType
    fromNode: char *
    toNode: char *

    """
    return _toolkit.link_add(ph, id, linkType, fromNode, toNode)

def link_delete(ph: 'Handle', index: 'int', actionCode: 'int') -> "int":
    """
    link_delete(ph, index, actionCode) -> int

    Parameters
    ----------
    ph: Handle
    index: int
    actionCode: int

    """
    return _toolkit.link_delete(ph, index, actionCode)

def link_getindex(ph: 'Handle', id: 'char *') -> "int *":
    """
    link_getindex(ph, id) -> int

    Parameters
    ----------
    ph: Handle
    id: char *

    """
    return _toolkit.link_getindex(ph, id)

def link_getid(ph: 'Handle', index: 'int') -> "char *":
    """
    link_getid(ph, index) -> int

    Parameters
    ----------
    ph: Handle
    index: int

    """
    return _toolkit.link_getid(ph, index)

def link_setid(ph: 'Handle', index: 'int', newid: 'char *') -> "int":
    """
    link_setid(ph, index, newid) -> int

    Parameters
    ----------
    ph: Handle
    index: int
    newid: char *

    """
    return _toolkit.link_setid(ph, index, newid)

def link_gettype(ph: 'Handle', index: 'int') -> "int *":
    """
    link_gettype(ph, index) -> int

    Parameters
    ----------
    ph: Handle
    index: int

    """
    return _toolkit.link_gettype(ph, index)

def link_settype(ph: 'Handle', index: 'int *', type: 'EN_LinkType', actionCode: 'int') -> "int":
    """
    link_settype(ph, index, type, actionCode) -> int

    Parameters
    ----------
    ph: Handle
    index: int *
    type: enum EN_LinkType
    actionCode: int

    """
    return _toolkit.link_settype(ph, index, type, actionCode)

def link_getnodes(ph: 'Handle', index: 'int') -> "int *, int *":
    """
    link_getnodes(ph, index) -> int

    Parameters
    ----------
    ph: Handle
    index: int

    """
    return _toolkit.link_getnodes(ph, index)

def link_setnodes(ph: 'Handle', index: 'int', node1: 'int', node2: 'int') -> "int":
    """
    link_setnodes(ph, index, node1, node2) -> int

    Parameters
    ----------
    ph: Handle
    index: int
    node1: int
    node2: int

    """
    return _toolkit.link_setnodes(ph, index, node1, node2)

def link_getvalue(ph: 'Handle', index: 'int', code: 'EN_LinkProperty') -> "double *":
    """
    link_getvalue(ph, index, code) -> int

    Parameters
    ----------
    ph: Handle
    index: int
    code: enum EN_LinkProperty

    """
    return _toolkit.link_getvalue(ph, index, code)

def link_setvalue(ph: 'Handle', index: 'int', code: 'int', value: 'double') -> "int":
    """
    link_setvalue(ph, index, code, value) -> int

    Parameters
    ----------
    ph: Handle
    index: int
    code: int
    value: double

    """
    return _toolkit.link_setvalue(ph, index, code, value)

def pump_gettype(ph: 'Handle', linkIndex: 'int') -> "int *":
    """
    pump_gettype(ph, linkIndex) -> int

    Parameters
    ----------
    ph: Handle
    linkIndex: int

    """
    return _toolkit.pump_gettype(ph, linkIndex)

def pump_getheadcurveindex(ph: 'Handle', pumpIndex: 'int') -> "int *":
    """
    pump_getheadcurveindex(ph, pumpIndex) -> int

    Parameters
    ----------
    ph: Handle
    pumpIndex: int

    """
    return _toolkit.pump_getheadcurveindex(ph, pumpIndex)

def pump_setheadcurveindex(ph: 'Handle', pumpIndex: 'int', curveIndex: 'int') -> "int":
    """
    pump_setheadcurveindex(ph, pumpIndex, curveIndex) -> int

    Parameters
    ----------
    ph: Handle
    pumpIndex: int
    curveIndex: int

    """
    return _toolkit.pump_setheadcurveindex(ph, pumpIndex, curveIndex)

def ptrn_add(ph: 'Handle', id: 'char *') -> "int":
    """
    ptrn_add(ph, id) -> int

    Parameters
    ----------
    ph: Handle
    id: char *

    """
    return _toolkit.ptrn_add(ph, id)

def ptrn_getindex(ph: 'Handle', id: 'char *') -> "int *":
    """
    ptrn_getindex(ph, id) -> int

    Parameters
    ----------
    ph: Handle
    id: char *

    """
    return _toolkit.ptrn_getindex(ph, id)

def ptrn_getid(ph: 'Handle', index: 'int', id: 'char *') -> "int":
    """
    ptrn_getid(ph, index, id) -> int

    Parameters
    ----------
    ph: Handle
    index: int
    id: char *

    """
    return _toolkit.ptrn_getid(ph, index, id)

def ptrn_getlength(ph: 'Handle', index: 'int') -> "int *":
    """
    ptrn_getlength(ph, index) -> int

    Parameters
    ----------
    ph: Handle
    index: int

    """
    return _toolkit.ptrn_getlength(ph, index)

def ptrn_getvalue(ph: 'Handle', index: 'int', period: 'int') -> "double *":
    """
    ptrn_getvalue(ph, index, period) -> int

    Parameters
    ----------
    ph: Handle
    index: int
    period: int

    """
    return _toolkit.ptrn_getvalue(ph, index, period)

def ptrn_setvalue(ph: 'Handle', index: 'int', period: 'int', value: 'double') -> "int":
    """
    ptrn_setvalue(ph, index, period, value) -> int

    Parameters
    ----------
    ph: Handle
    index: int
    period: int
    value: double

    """
    return _toolkit.ptrn_setvalue(ph, index, period, value)

def ptrn_getavgvalue(ph: 'Handle', index: 'int') -> "double *":
    """
    ptrn_getavgvalue(ph, index) -> int

    Parameters
    ----------
    ph: Handle
    index: int

    """
    return _toolkit.ptrn_getavgvalue(ph, index)

def ptrn_set(ph: 'Handle', index: 'int', values: 'double *', len: 'int') -> "int":
    """
    ptrn_set(ph, index, values, len) -> int

    Parameters
    ----------
    ph: Handle
    index: int
    values: double *
    len: int

    """
    return _toolkit.ptrn_set(ph, index, values, len)

def curv_add(ph: 'Handle', id: 'char *') -> "int":
    """
    curv_add(ph, id) -> int

    Parameters
    ----------
    ph: Handle
    id: char *

    """
    return _toolkit.curv_add(ph, id)

def curv_getindex(ph: 'Handle', id: 'char *') -> "int *":
    """
    curv_getindex(ph, id) -> int

    Parameters
    ----------
    ph: Handle
    id: char *

    """
    return _toolkit.curv_getindex(ph, id)

def curv_getid(ph: 'Handle', index: 'int', id: 'char *') -> "int":
    """
    curv_getid(ph, index, id) -> int

    Parameters
    ----------
    ph: Handle
    index: int
    id: char *

    """
    return _toolkit.curv_getid(ph, index, id)

def curv_getlength(ph: 'Handle', index: 'int') -> "int *":
    """
    curv_getlength(ph, index) -> int

    Parameters
    ----------
    ph: Handle
    index: int

    """
    return _toolkit.curv_getlength(ph, index)

def curv_gettype(ph: 'Handle', curveIndex: 'int') -> "int *":
    """
    curv_gettype(ph, curveIndex) -> int

    Parameters
    ----------
    ph: Handle
    curveIndex: int

    """
    return _toolkit.curv_gettype(ph, curveIndex)

def curv_getvalue(ph: 'Handle', curveIndex: 'int', pointIndex: 'int') -> "double *, double *":
    """
    curv_getvalue(ph, curveIndex, pointIndex) -> int

    Parameters
    ----------
    ph: Handle
    curveIndex: int
    pointIndex: int

    """
    return _toolkit.curv_getvalue(ph, curveIndex, pointIndex)

def curv_setvalue(ph: 'Handle', curveIndex: 'int', pointIndex: 'int', x: 'double', y: 'double') -> "int":
    """
    curv_setvalue(ph, curveIndex, pointIndex, x, y) -> int

    Parameters
    ----------
    ph: Handle
    curveIndex: int
    pointIndex: int
    x: double
    y: double

    """
    return _toolkit.curv_setvalue(ph, curveIndex, pointIndex, x, y)

def curv_get(ph: 'Handle', curveIndex: 'int', id: 'char *', nValues: 'int *', xValues: 'double **', yValues: 'double **') -> "int":
    """
    curv_get(ph, curveIndex, id, nValues, xValues, yValues) -> int

    Parameters
    ----------
    ph: Handle
    curveIndex: int
    id: char *
    nValues: int *
    xValues: double **
    yValues: double **

    """
    return _toolkit.curv_get(ph, curveIndex, id, nValues, xValues, yValues)

def curv_set(ph: 'Handle', index: 'int', x: 'double *', y: 'double *', len: 'int') -> "int":
    """
    curv_set(ph, index, x, y, len) -> int

    Parameters
    ----------
    ph: Handle
    index: int
    x: double *
    y: double *
    len: int

    """
    return _toolkit.curv_set(ph, index, x, y, len)

def scntl_add(ph: 'Handle', type: 'int', linkIndex: 'int', setting: 'double', nodeIndex: 'int', level: 'double', index: 'int *') -> "int":
    """
    scntl_add(ph, type, linkIndex, setting, nodeIndex, level, index) -> int

    Parameters
    ----------
    ph: Handle
    type: int
    linkIndex: int
    setting: double
    nodeIndex: int
    level: double
    index: int *

    """
    return _toolkit.scntl_add(ph, type, linkIndex, setting, nodeIndex, level, index)

def scntl_delete(ph: 'Handle', index: 'int') -> "int":
    """
    scntl_delete(ph, index) -> int

    Parameters
    ----------
    ph: Handle
    index: int

    """
    return _toolkit.scntl_delete(ph, index)

def scntl_get(ph: 'Handle', controlIndex: 'int') -> "int *, int *, double *, int *, double *":
    """
    scntl_get(ph, controlIndex) -> int

    Parameters
    ----------
    ph: Handle
    controlIndex: int

    """
    return _toolkit.scntl_get(ph, controlIndex)

def scntl_set(ph: 'Handle', cindex: 'int', ctype: 'int', lindex: 'int', setting: 'double', nindex: 'int', level: 'double') -> "int":
    """
    scntl_set(ph, cindex, ctype, lindex, setting, nindex, level) -> int

    Parameters
    ----------
    ph: Handle
    cindex: int
    ctype: int
    lindex: int
    setting: double
    nindex: int
    level: double

    """
    return _toolkit.scntl_set(ph, cindex, ctype, lindex, setting, nindex, level)

def rcntl_add(ph: 'Handle', rule: 'char *') -> "int":
    """
    rcntl_add(ph, rule) -> int

    Parameters
    ----------
    ph: Handle
    rule: char *

    """
    return _toolkit.rcntl_add(ph, rule)

def rcntl_delete(ph: 'Handle', index: 'int') -> "int":
    """
    rcntl_delete(ph, index) -> int

    Parameters
    ----------
    ph: Handle
    index: int

    """
    return _toolkit.rcntl_delete(ph, index)

def rcntl_get(ph: 'Handle', index: 'int', nPremises: 'int *', nThenActions: 'int *', nElseActions: 'int *', priority: 'double *') -> "int":
    """
    rcntl_get(ph, index, nPremises, nThenActions, nElseActions, priority) -> int

    Parameters
    ----------
    ph: Handle
    index: int
    nPremises: int *
    nThenActions: int *
    nElseActions: int *
    priority: double *

    """
    return _toolkit.rcntl_get(ph, index, nPremises, nThenActions, nElseActions, priority)

def rcntl_getid(ph: 'Handle', index: 'int', id: 'char *') -> "int":
    """
    rcntl_getid(ph, index, id) -> int

    Parameters
    ----------
    ph: Handle
    index: int
    id: char *

    """
    return _toolkit.rcntl_getid(ph, index, id)

def rcntl_getpremise(ph: 'Handle', ruleIndex: 'int', premiseIndex: 'int', logop: 'int *', object: 'int *', objIndex: 'int *', variable: 'int *', relop: 'int *', status: 'int *', value: 'double *') -> "int":
    """
    rcntl_getpremise(ph, ruleIndex, premiseIndex, logop, object, objIndex, variable, relop, status, value) -> int

    Parameters
    ----------
    ph: Handle
    ruleIndex: int
    premiseIndex: int
    logop: int *
    object: int *
    objIndex: int *
    variable: int *
    relop: int *
    status: int *
    value: double *

    """
    return _toolkit.rcntl_getpremise(ph, ruleIndex, premiseIndex, logop, object, objIndex, variable, relop, status, value)

def rcntl_setpremise(ph: 'Handle', ruleIndex: 'int', premiseIndex: 'int', logop: 'int', object: 'int', objIndex: 'int', variable: 'int', relop: 'int', status: 'int', value: 'double') -> "int":
    """
    rcntl_setpremise(ph, ruleIndex, premiseIndex, logop, object, objIndex, variable, relop, status, value) -> int

    Parameters
    ----------
    ph: Handle
    ruleIndex: int
    premiseIndex: int
    logop: int
    object: int
    objIndex: int
    variable: int
    relop: int
    status: int
    value: double

    """
    return _toolkit.rcntl_setpremise(ph, ruleIndex, premiseIndex, logop, object, objIndex, variable, relop, status, value)

def rcntl_setpremiseindex(ph: 'Handle', ruleIndex: 'int', premiseIndex: 'int', objIndex: 'int') -> "int":
    """
    rcntl_setpremiseindex(ph, ruleIndex, premiseIndex, objIndex) -> int

    Parameters
    ----------
    ph: Handle
    ruleIndex: int
    premiseIndex: int
    objIndex: int

    """
    return _toolkit.rcntl_setpremiseindex(ph, ruleIndex, premiseIndex, objIndex)

def rcntl_setpremisestatus(ph: 'Handle', ruleIndex: 'int', premiseIndex: 'int', status: 'int') -> "int":
    """
    rcntl_setpremisestatus(ph, ruleIndex, premiseIndex, status) -> int

    Parameters
    ----------
    ph: Handle
    ruleIndex: int
    premiseIndex: int
    status: int

    """
    return _toolkit.rcntl_setpremisestatus(ph, ruleIndex, premiseIndex, status)

def rcntl_setpremisevalue(ph: 'Handle', ruleIndex: 'int', premiseIndex: 'int', value: 'double') -> "int":
    """
    rcntl_setpremisevalue(ph, ruleIndex, premiseIndex, value) -> int

    Parameters
    ----------
    ph: Handle
    ruleIndex: int
    premiseIndex: int
    value: double

    """
    return _toolkit.rcntl_setpremisevalue(ph, ruleIndex, premiseIndex, value)

def rcntl_getthenaction(ph: 'Handle', ruleIndex: 'int', actionIndex: 'int', linkIndex: 'int *', status: 'int *', setting: 'double *') -> "int":
    """
    rcntl_getthenaction(ph, ruleIndex, actionIndex, linkIndex, status, setting) -> int

    Parameters
    ----------
    ph: Handle
    ruleIndex: int
    actionIndex: int
    linkIndex: int *
    status: int *
    setting: double *

    """
    return _toolkit.rcntl_getthenaction(ph, ruleIndex, actionIndex, linkIndex, status, setting)

def rcntl_setthenaction(ph: 'Handle', ruleIndex: 'int', actionIndex: 'int', linkIndex: 'int', status: 'int', setting: 'double') -> "int":
    """
    rcntl_setthenaction(ph, ruleIndex, actionIndex, linkIndex, status, setting) -> int

    Parameters
    ----------
    ph: Handle
    ruleIndex: int
    actionIndex: int
    linkIndex: int
    status: int
    setting: double

    """
    return _toolkit.rcntl_setthenaction(ph, ruleIndex, actionIndex, linkIndex, status, setting)

def rcntl_getelseaction(ph: 'Handle', ruleIndex: 'int', actionIndex: 'int', linkIndex: 'int *', status: 'int *', setting: 'double *') -> "int":
    """
    rcntl_getelseaction(ph, ruleIndex, actionIndex, linkIndex, status, setting) -> int

    Parameters
    ----------
    ph: Handle
    ruleIndex: int
    actionIndex: int
    linkIndex: int *
    status: int *
    setting: double *

    """
    return _toolkit.rcntl_getelseaction(ph, ruleIndex, actionIndex, linkIndex, status, setting)

def rcntl_setelseaction(ph: 'Handle', ruleIndex: 'int', actionIndex: 'int', linkIndex: 'int', status: 'int', setting: 'double') -> "int":
    """
    rcntl_setelseaction(ph, ruleIndex, actionIndex, linkIndex, status, setting) -> int

    Parameters
    ----------
    ph: Handle
    ruleIndex: int
    actionIndex: int
    linkIndex: int
    status: int
    setting: double

    """
    return _toolkit.rcntl_setelseaction(ph, ruleIndex, actionIndex, linkIndex, status, setting)

def rcntl_setrulepriority(ph: 'Handle', index: 'int', priority: 'double') -> "int":
    """
    rcntl_setrulepriority(ph, index, priority) -> int

    Parameters
    ----------
    ph: Handle
    index: int
    priority: double

    """
    return _toolkit.rcntl_setrulepriority(ph, index, priority)

def toolkit_getversion(int_out: 'int *') -> "int":
    """
    toolkit_getversion(int_out) -> int

    Parameters
    ----------
    int_out: int *

    """
    return _toolkit.toolkit_getversion(int_out)

def proj_create() -> "Handle *":
    """proj_create() -> int"""
    return _toolkit.proj_create()

def proj_delete(ph_inout: 'Handle *') -> "Handle *":
    """
    proj_delete(ph_inout) -> int

    Parameters
    ----------
    ph_inout: Handle *

    """
    return _toolkit.proj_delete(ph_inout)

def err_clear(ph: 'Handle') -> "void":
    """
    err_clear(ph)

    Parameters
    ----------
    ph: Handle

    """
    return _toolkit.err_clear(ph)

def err_check(ph: 'Handle', msg_buffer: 'char **') -> "int":
    """
    err_check(ph, msg_buffer) -> int

    Parameters
    ----------
    ph: Handle
    msg_buffer: char **

    """
    return _toolkit.err_check(ph, msg_buffer)

def toolkit_free(memory: 'void **') -> "void":
    """
    toolkit_free(memory)

    Parameters
    ----------
    memory: void **

    """
    return _toolkit.toolkit_free(memory)


import enum

class NodeProperty(enum.Enum):
    ELEVATION   = EN_ELEVATION
    BASEDEMAND  = EN_BASEDEMAND
    PATTERN     = EN_PATTERN
    EMITTER     = EN_EMITTER
    INITQUAL    = EN_INITQUAL
    SOURCEQUAL  = EN_SOURCEQUAL
    SOURCEPAT   = EN_SOURCEPAT
    SOURCETYPE  = EN_SOURCETYPE
    TANKLEVEL   = EN_TANKLEVEL
    DEMAND      = EN_DEMAND
    HEAD        = EN_HEAD
    PRESSURE    = EN_PRESSURE
    QUALITY     = EN_QUALITY
    SOURCEMASS  = EN_SOURCEMASS
    INITVOLUME  = EN_INITVOLUME
    MIXMODEL    = EN_MIXMODEL
    MIXZONEVOL  = EN_MIXZONEVOL
    TANKDIAM    = EN_TANKDIAM
    MINVOLUME   = EN_MINVOLUME
    VOLCURVE    = EN_VOLCURVE
    MINLEVEL    = EN_MINLEVEL
    MAXLEVEL    = EN_MAXLEVEL
    MIXFRACTION = EN_MIXFRACTION
    TANK_KBULK  = EN_TANK_KBULK
    TANKVOLUME  = EN_TANKVOLUME
    MAXVOLUME   = EN_MAXVOLUME


class LinkProperty(enum.Enum):
    DIAMETER        = EN_DIAMETER
    LENGTH          = EN_LENGTH
    ROUGHNESS       = EN_ROUGHNESS
    MINORLOSS       = EN_MINORLOSS
    INITSTATUS      = EN_INITSTATUS
    INITSETTING     = EN_INITSETTING
    KBULK           = EN_KBULK
    KWALL           = EN_KWALL
    FLOW            = EN_FLOW
    VELOCITY        = EN_VELOCITY
    HEADLOSS        = EN_HEADLOSS
    STATUS          = EN_STATUS
    SETTING         = EN_SETTING
    ENERGY          = EN_ENERGY
    LINKQUAL        = EN_LINKQUAL
    LINKPATTERN     = EN_LINKPATTERN
    PUMP_STATE      = EN_PUMP_STATE
    PUMP_EFFIC      = EN_PUMP_EFFIC
    PUMP_POWER      = EN_PUMP_POWER
    PUMP_HCURVE     = EN_PUMP_HCURVE
    PUMP_ECURVE     = EN_PUMP_ECURVE
    PUMP_ECOST      = EN_PUMP_ECOST
    PUMP_EPAT       = EN_PUMP_EPAT


class TimeParameter(enum.Enum):
    DURATION     = EN_DURATION
    HYDSTEP      = EN_HYDSTEP
    QUALSTEP     = EN_QUALSTEP
    PATTERNSTEP  = EN_PATTERNSTEP
    PATTERNSTART = EN_PATTERNSTART
    REPORTSTEP   = EN_REPORTSTEP
    REPORTSTART  = EN_REPORTSTART
    RULESTEP     = EN_RULESTEP
    STATISTIC    = EN_STATISTIC
    PERIODS      = EN_PERIODS
    STARTTIME    = EN_STARTTIME
    HTIME        = EN_HTIME
    QTIME        = EN_QTIME
    HALTFLAG     = EN_HALTFLAG
    NEXTEVENT    = EN_NEXTEVENT
    NEXTEVENTTANK = EN_NEXTEVENTTANK


class AnalysisStatistic(enum.Enum):
    ITERATIONS    = EN_ITERATIONS
    RELATIVEERROR = EN_RELATIVEERROR
    MAXHEADERROR  = EN_MAXHEADERROR
    MAXFLOWCHANGE = EN_MAXFLOWCHANGE
    MASSBALANCE   = EN_MASSBALANCE


class CountType(enum.Enum):
    NODES         = EN_NODECOUNT
    TANKS         = EN_TANKCOUNT
    LINKS         = EN_LINKCOUNT
    PTRNS         = EN_PATCOUNT
    CURVS         = EN_CURVECOUNT
    CNTLS         = EN_CONTROLCOUNT
    RULES         = EN_RULECOUNT


class NodeType(enum.Enum):
    JUNCTION    = EN_JUNCTION
    RESERVOIR   = EN_RESERVOIR
    TANK        = EN_TANK


class LinkType(enum.Enum):
    CVPIPE       = EN_CVPIPE
    PIPE         = EN_PIPE
    PUMP         = EN_PUMP
    PRV          = EN_PRV
    PSV          = EN_PSV
    PBV          = EN_PBV
    FCV          = EN_FCV
    TCV          = EN_TCV
    GPV          = EN_GPV


class QualityType(enum.Enum):
    NONE        = EN_NONE
    CHEM        = EN_CHEM
    AGE         = EN_AGE
    TRACE       = EN_TRACE


class SourceType(enum.Enum):
    CONCEN      = EN_CONCEN
    MASS        = EN_MASS
    SETPOINT    = EN_SETPOINT
    FLOWPACED   = EN_FLOWPACED


class HeadLossType(enum.Enum):
    HW          = EN_HW
    DW          = EN_DW
    CM          = EN_CM


class FlowUnits(enum.Enum):
    CFS         = EN_CFS
    GPM         = EN_GPM
    MGD         = EN_MGD
    IMGD        = EN_IMGD
    AFD         = EN_AFD
    LPS         = EN_LPS
    LPM         = EN_LPM
    MLD         = EN_MLD
    CMH         = EN_CMH
    CMD         = EN_CMD


class DemandModel(enum.Enum):
    DDA         = EN_DDA
    PDA         = EN_PDA


class Option(enum.Enum):
    TRIALS       = EN_TRIALS
    ACCURACY     = EN_ACCURACY
    TOLERANCE    = EN_TOLERANCE
    EMITEXPON    = EN_EMITEXPON
    DEMANDMULT   = EN_DEMANDMULT
    HEADERROR    = EN_HEADERROR
    FLOWCHANGE   = EN_FLOWCHANGE
    DEFDEMANDPAT = EN_DEFDEMANDPAT
    HEADLOSSFORM = EN_HEADLOSSFORM
    GLOBALEFFIC  = EN_GLOBALEFFIC
    GLOBALPRICE  = EN_GLOBALPRICE
    GLOBALPATTERN = EN_GLOBALPATTERN
    DEMANDCHARGE = EN_DEMANDCHARGE


class ControlType(enum.Enum):
    LOWLEVEL    = EN_LOWLEVEL
    HILEVEL     = EN_HILEVEL
    TIMER       = EN_TIMER
    TIMEOFDAY   = EN_TIMEOFDAY


class StatisticType(enum.Enum):
    SERIES      = EN_SERIES
    AVERAGE     = EN_AVERAGE
    MINIMUM     = EN_MINIMUM
    MAXIMUM     = EN_MAXIMUM
    RANGE       = EN_RANGE


class MixingModel(enum.Enum):
    MIX1        = EN_MIX1
    MIX2        = EN_MIX2
    FIFO        = EN_FIFO
    LIFO        = EN_LIFO


class SaveOption(enum.Enum):
    NOSAVE        = EN_NOSAVE
    SAVE          = EN_SAVE
    INITFLOW      = EN_INITFLOW
    SAVE_AND_INIT = EN_SAVE_AND_INIT


class PumpType(enum.Enum):
    CONST_HP    = EN_CONST_HP
    POWER_FUNC  = EN_POWER_FUNC
    CUSTOM      = EN_CUSTOM
    NOCURVE     = EN_NOCURVE


class CurveType(enum.Enum):
    VOLUME_CURVE  = EN_VOLUME_CURVE
    PUMP_CURVE    = EN_PUMP_CURVE
    EFFIC_CURVE   = EN_EFFIC_CURVE
    HLOSS_CURVE   = EN_HLOSS_CURVE
    GENERIC_CURVE = EN_GENERIC_CURVE


class ActionCode(enum.Enum):
    UNCONDITIONAL = EN_UNCONDITIONAL
    CONDITIONAL   = EN_CONDITIONAL


class RuleObject(enum.Enum):
    R_NODE      = EN_R_NODE
    R_LINK      = EN_R_LINK
    R_SYSTEM    = EN_R_SYSTEM


class RuleVariable(enum.Enum):
    R_DEMAND    = EN_R_DEMAND
    R_HEAD      = EN_R_HEAD
    R_GRADE     = EN_R_GRADE
    R_LEVEL     = EN_R_LEVEL
    R_PRESSURE  = EN_R_PRESSURE
    R_FLOW      = EN_R_FLOW
    R_STATUS    = EN_R_STATUS
    R_SETTING   = EN_R_SETTING
    R_POWER     = EN_R_POWER
    R_TIME      = EN_R_TIME
    R_CLOCKTIME = EN_R_CLOCKTIME
    R_FILLTIME  = EN_R_FILLTIME
    R_DRAINTIME = EN_R_DRAINTIME


class RuleOperator(enum.Enum):
    R_EQ        = EN_R_EQ
    R_NE        = EN_R_NE
    R_LE        = EN_R_LE
    R_GE        = EN_R_GE
    R_LT        = EN_R_LT
    R_GT        = EN_R_GT
    R_IS        = EN_R_IS
    R_NOT       = EN_R_NOT
    R_BELOW     = EN_R_BELOW
    R_ABOVE     = EN_R_ABOVE


class RuleStatus(enum.Enum):
    R_IS_OPEN   = EN_R_IS_OPEN
    R_IS_CLOSED = EN_R_IS_CLOSED
    R_IS_ACTIVE = EN_R_IS_ACTIVE


class StatusReport(enum.Enum):
    NO_REPORT     = EN_NO_REPORT
    NORMAL_REPORT = EN_NORMAL_REPORT
    FULL_REPORT   = EN_FULL_REPORT


# This file is compatible with both classic and new-style classes.


